// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package it.polito.ai.gas.controller;

import it.polito.ai.gas.business.PurchaseRequest;
import it.polito.ai.gas.business.User;
import it.polito.ai.gas.controller.PurchaseRequestController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect PurchaseRequestController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PurchaseRequestController.showJson(@PathVariable("id") Integer id) {
        PurchaseRequest purchaseRequest = PurchaseRequest.findPurchaseRequest(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (purchaseRequest == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(purchaseRequest.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PurchaseRequestController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<PurchaseRequest> result = PurchaseRequest.findAllPurchaseRequests();
        return new ResponseEntity<String>(PurchaseRequest.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PurchaseRequestController.createFromJson(@RequestBody String json) {
        PurchaseRequest purchaseRequest = PurchaseRequest.fromJsonToPurchaseRequest(json);
        purchaseRequest.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PurchaseRequestController.createFromJsonArray(@RequestBody String json) {
        for (PurchaseRequest purchaseRequest: PurchaseRequest.fromJsonArrayToPurchaseRequests(json)) {
            purchaseRequest.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> PurchaseRequestController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        PurchaseRequest purchaseRequest = PurchaseRequest.fromJsonToPurchaseRequest(json);
        if (purchaseRequest.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> PurchaseRequestController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (PurchaseRequest purchaseRequest: PurchaseRequest.fromJsonArrayToPurchaseRequests(json)) {
            if (purchaseRequest.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> PurchaseRequestController.deleteFromJson(@PathVariable("id") Integer id) {
        PurchaseRequest purchaseRequest = PurchaseRequest.findPurchaseRequest(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (purchaseRequest == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        purchaseRequest.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByAcquirer", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PurchaseRequestController.jsonFindPurchaseRequestsByAcquirer(@RequestParam("acquirer") User acquirer) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(PurchaseRequest.toJsonArray(PurchaseRequest.findPurchaseRequestsByAcquirer(acquirer).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCompletedNot", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PurchaseRequestController.jsonFindPurchaseRequestsByCompletedNot(@RequestParam(value = "completed", required = false) Boolean completed) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(PurchaseRequest.toJsonArray(PurchaseRequest.findPurchaseRequestsByCompletedNot(completed == null ? Boolean.FALSE : completed).getResultList()), headers, HttpStatus.OK);
    }
    
}
