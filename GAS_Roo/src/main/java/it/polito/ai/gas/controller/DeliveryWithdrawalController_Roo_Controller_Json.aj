// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package it.polito.ai.gas.controller;

import it.polito.ai.gas.business.DeliveryWithdrawal;
import it.polito.ai.gas.business.Proposal;
import it.polito.ai.gas.controller.DeliveryWithdrawalController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DeliveryWithdrawalController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DeliveryWithdrawalController.showJson(@PathVariable("id") Integer id) {
        DeliveryWithdrawal deliveryWithdrawal = DeliveryWithdrawal.findDeliveryWithdrawal(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (deliveryWithdrawal == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(deliveryWithdrawal.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DeliveryWithdrawalController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<DeliveryWithdrawal> result = DeliveryWithdrawal.findAllDeliveryWithdrawals();
        return new ResponseEntity<String>(DeliveryWithdrawal.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DeliveryWithdrawalController.createFromJson(@RequestBody String json) {
        DeliveryWithdrawal deliveryWithdrawal = DeliveryWithdrawal.fromJsonToDeliveryWithdrawal(json);
        deliveryWithdrawal.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DeliveryWithdrawalController.createFromJsonArray(@RequestBody String json) {
        for (DeliveryWithdrawal deliveryWithdrawal: DeliveryWithdrawal.fromJsonArrayToDeliveryWithdrawals(json)) {
            deliveryWithdrawal.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> DeliveryWithdrawalController.updateFromJson(@RequestBody String json, @PathVariable("id") Integer id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        DeliveryWithdrawal deliveryWithdrawal = DeliveryWithdrawal.fromJsonToDeliveryWithdrawal(json);
        if (deliveryWithdrawal.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> DeliveryWithdrawalController.deleteFromJson(@PathVariable("id") Integer id) {
        DeliveryWithdrawal deliveryWithdrawal = DeliveryWithdrawal.findDeliveryWithdrawal(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (deliveryWithdrawal == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        deliveryWithdrawal.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByProposal", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DeliveryWithdrawalController.jsonFindDeliveryWithdrawalsByProposal(@RequestParam("proposal") Proposal proposal) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(DeliveryWithdrawal.toJsonArray(DeliveryWithdrawal.findDeliveryWithdrawalsByProposal(proposal).getResultList()), headers, HttpStatus.OK);
    }
    
}
